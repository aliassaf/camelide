#NAME Nat

Nat: Type.

Z: Nat.

S: Nat -> Nat.

plus: Nat -> Nat -> Nat.
[x:Nat] plus Z x --> x
[x:Nat,y:Nat] plus (S x) y --> S (plus x y).

mult: Nat -> Nat -> Nat.
[x:Nat] mult Z x --> Z
[x:Nat,y:Nat] mult (S x) y --> plus (mult x y) y.

pow: Nat -> Nat -> Nat.
[x:Nat] pow x Z --> S Z
[x:Nat,y:Nat] pow x (S y) --> mult (pow x y) x.

oneK: Nat.
[] oneK --> pow (S (S (S (S Z)))) (S (S (S (S (S Z))))).

fourK: Nat.
[] fourK --> mult (S (S (S (S Z)))) oneK.

oneM: Nat.
[] oneM --> mult oneK oneK.

DepType: Nat -> Type.

convTest: n: Nat -> DepType n.

[] convTest (plus fourK Z) --> convTest fourK
.
